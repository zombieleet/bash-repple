#!/usr/bin/env node


const fs = require('fs');
const repl = require('repl');
const vm = require('vm');
const exec = require('child_process').exec

const {	checkHistory,
		histArray,
		saveHistory,
		configureHistory,
		histFile
    } = require('./lib/history');

const substHistory = require('./lib/substHistory').substHistory

configureHistory();

var customRepl = repl.start({
    prompt: '> ',
    replMode: repl.REPL_MODE_STRICT,
    ignoreUndefined: true,
    eval: meval
});

function meval(cmd,context,filename,callback) {

    let result
    global.require = require

    if ( /^\$/.test(cmd) ) {

		// pass in the command and the callback function
		//   to the subHistory function . If this test succeeds return from ths function
		if ( substHistory(cmd,callback) ) {
			return
		}

		// pass in the typed command and the callback function to checkHistory function
		// if the return value is true, return from this function
		if ( checkHistory(cmd,callback) ) {
			return
		}

		
		saveHistory(cmd.replace("\n", ""), histFile)
		cmd = cmd.replace("\$", "");
		exec(cmd, (err, data) => {
			if ( err ) throw err;
			return callback(null,console.log(data))
		});


    } else {
		
		saveHistory(cmd.replace("\n", ""), histFile)
		// run the command in a vm
		result = vm.runInThisContext(cmd);
		return callback(null, result);
    }

}